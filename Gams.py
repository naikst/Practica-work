import random  # Модуль, который позволяет генерировать случайные числа, нужен для случайного урона

# Базовый класс, который описывает общего персонажа в игре
class Character:
    def __init__(self, name, health, attack_power):
        """
        Инициализация (создание) объекта класса Character.
        name: имя персонажа.
        health: сколько у персонажа здоровья (максимальное количество "очков жизни").
        attack_power: максимальная сила атаки персонажа.
        """
        self.name = name  # Сохраняем имя персонажа
        self.health = health  # Устанавливаем здоровье
        self.attack_power = attack_power  # Устанавливаем силу атаки

    def attack(self, other):
        """
        Обычная атака. Наносит урон другому персонажу.
        other: объект другого персонажа, который получает урон.
        """
        damage = random.randint(1, self.attack_power)  # Случайный урон от 1 до attack_power
        print(f'{self.name} атакует {other.name}!')  # Сообщаем, кто кого атакует
        other.take_damage(damage)  # Вызываем метод, чтобы другой персонаж "получил" урон

    def special_attack(self, other):
        """
        Базовый метод специальной атаки. Ничего не делает, но его могут переопределять наследники.
        """
        print(f'{self.name} не может использовать специальную атаку.')  # Сообщение, если персонаж не имеет спецатаки

    def take_damage(self, damage):
        """
        Метод, который уменьшает здоровье персонажа, когда он получает урон.
        damage: величина урона, который нужно вычесть из здоровья.
        """
        self.health -= damage  # Уменьшаем здоровье на значение урона
        print(f'{self.name} получил {damage} урона! Осталось {self.health} здоровья.')  # Сообщаем, сколько здоровья осталось

    def is_live(self):
        """
        Проверяет, жив ли персонаж. Персонаж считается живым, если его здоровье больше 0.
        """
        return self.health > 0  # Если здоровье больше 0, возвращаем True (жив)

    def __str__(self):
        """
        Возвращает строковое описание персонажа, показывающее его имя и здоровье.
        """
        return f'{self.name}: {self.health} здоровья'  # Форматируем строку с именем и текущим здоровьем

# Класс Warrior (Воин), который наследует базовые свойства и методы от Character
class Warrior(Character):
    def __init__(self, name):
        """
        Создаем воина с определённым количеством здоровья и силы атаки.
        name: имя персонажа.
        """
        super().__init__(name, health=100, attack_power=25)  # Устанавливаем здоровье 100 и силу атаки 25 для воина

    def special_attack(self, other):
        """
        Специальная атака воина. Наносит больший урон, чем обычная атака.
        other: противник, который получает урон.
        """
        damage = random.randint(15, self.attack_power * 2)  # Урон от 15 до двойной силы атаки
        print(f'{self.name} использует специальную атаку на {other.name}!')  # Сообщение о специальной атаке
        other.take_damage(damage)  # Противник получает урон

# Класс Mage (Маг), который также наследует свойства и методы от Character
class Mage(Character):
    def __init__(self, name):
        """
        Создаем мага с меньшим здоровьем, но с более мощными атаками.
        name: имя персонажа.
        """
        super().__init__(name, health=75, attack_power=20)  # Устанавливаем здоровье 75 и силу атаки 20 для мага

    def special_attack(self, other):
        """
        Специальная атака мага. Наносит больше урона за счёт магии.
        other: противник, который получает урон.
        """
        damage = random.randint(25, self.attack_power + 33)  # Урон от 25 до силы атаки + 33
        print(f'{self.name} кастует заклинание на {other.name}!')  # Сообщение о заклинании
        other.take_damage(damage)  # Противник получает урон

# Функция для проведения боя между двумя персонажами
def battle(character1, character2):
    """
    Функция, которая организует пошаговый бой между двумя персонажами.
    character1: первый персонаж.
    character2: второй персонаж.
    """
    while character1.is_live() and character2.is_live():  # Пока оба персонажа живы
        for attacker, defender in [(character1, character2), (character2, character1)]:  # Поочередные атаки
            if random.choice([True, False]):  # Случайно решаем, использовать ли специальную атаку
                attacker.special_attack(defender)  # Атакующий использует специальную атаку
            else:
                attacker.attack(defender)  # Атакующий использует обычную атаку

            print(f'Состояние: {attacker}, {defender}')  # Показываем текущее здоровье персонажей
            if not defender.is_live():  # Если защитник погиб
                print(f'{defender.name} побежден! {attacker.name} победил!')  # Сообщаем о победе
                return  # Завершаем бой

# Главная функция, которая запускает игру
def main():
    """
    Главная функция, в которой игрок создаёт своего персонажа и сражается с противником.
    """
    print('Добро пожаловать в игру!')  # Приветствие
    player_name = input('Введите имя игрока: ').strip() or 'Игрок'  # Запрашиваем имя игрока, если пустое, устанавливаем "Игрок"

    # Выбор класса персонажа
    choice = input('Выберите класс (воин / маг): ').lower()
    if choice == 'воин':
        player = Warrior(player_name)  # Создаем воина
    elif choice == 'маг':
        player = Mage(player_name)  # Создаем мага
    else:
        print('Неизвестный класс, создается игрок по умолчанию (воин).')  # Сообщение об ошибке ввода
        player = Warrior(player_name)  # По умолчанию создаем воина

    # Создаем противника
    enemy = Warrior('Воин Скелет')  # Противник — всегда воин

    print(f'\n{player.name} начинает бой с {enemy.name}')  # Сообщаем, кто с кем сражается
    battle(player, enemy)  # Запускаем бой

# Проверяем, запущен ли файл как программа, и вызываем main()
if __name__ == '__main__':
    main()