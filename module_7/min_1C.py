# Импортируем модуль os для работы с файловой системой (например, проверка существования файла)
import os

# Класс Employee представляет базового сотрудника
class Employee:
    # Конструктор класса Employee, вызывается при создании нового объекта
    def __init__(self, name, position, salary):
        # Устанавливаем атрибуты объекта: имя, должность и зарплата
        self.name = name
        self.position = position
        self.salary = salary

    # Метод __str__ определяет, как объект будет представлен в виде строки
    def __str__(self):
        # Возвращаем строку с информацией о сотруднике
        return f'ФИО: {self.name}, Должность: {self.position}, Зарплата: {self.salary}'


# Класс Manager наследуется от класса Employee и представляет менеджера
class Manager(Employee):
    # Конструктор класса Manager, вызывается при создании нового объекта
    def __init__(self, name, position, salary, team_size):
        # Вызываем конструктор родительского класса Employee
        super().__init__(name, position, salary)
        # Устанавливаем дополнительный атрибут: размер команды
        self.team_size = team_size

    # Переопределяем метод __str__ для добавления информации о размере команды
    def __str__(self):
        # Вызываем метод __str__ родительского класса и добавляем информацию о команде
        return f'{super().__str__()}, Размер команды: {self.team_size}'


# Класс Company представляет компанию, которая управляет списком сотрудников
class Company:
    # Конструктор класса Company, вызывается при создании нового объекта
    def __init__(self, file_name='employees.txt'):
        # Инициализируем пустой список сотрудников
        self.employees = []
        # Устанавливаем имя файла для сохранения и загрузки данных
        self.file_name = file_name

    # Метод для добавления сотрудника в список
    def add_employee(self, employee):
        # Добавляем переданного сотрудника в список
        self.employees.append(employee)
        # Сохраняем обновленный список сотрудников в файл
        self.save_to_file(self.file_name)
        # Выводим сообщение о добавлении сотрудника
        print(f'Сотрудник {employee.name} добавлен в список')

    # Метод для вывода списка всех сотрудников
    def list_employees(self):
        # Проверяем, пуст ли список сотрудников
        if not self.employees:
            # Если список пуст, выводим сообщение
            print('Список сотрудников пуст')
        else:
            # Перебираем всех сотрудников в списке и выводим их информацию
            for emp in self.employees:
                print(emp)

    # Метод для сохранения списка сотрудников в файл
    def save_to_file(self, file_name):
        # Открываем файл для записи
        with open(file_name, 'w') as f:
            # Перебираем всех сотрудников в списке
            for emp in self.employees:
                # Записываем информацию о сотруднике в файл в формате "имя,должность,зарплата"
                f.write(f'{emp.name},{emp.position},{emp.salary}\n')

    # Метод для загрузки списка сотрудников из файла
    def load_from_file(self, file_name):
        # Проверяем, существует ли файл
        if not os.path.exists(file_name):
            # Если файл не существует, выводим сообщение
            print(f'Файл {file_name} не существует.')
            return
        # Очищаем текущий список сотрудников
        self.employees = []
        # Открываем файл для чтения
        with open(file_name, 'r') as f:
            # Перебираем все строки в файле
            for line in f:
                # Разделяем строку на части по запятой
                name, position, salary = line.strip().split(',')
                # Создаем объект Employee и добавляем его в список
                self.employees.append(Employee(name, position, float(salary)))
        # Выводим сообщение об успешной загрузке
        print(f'Список сотрудников успешно загружен из файла {file_name}')

    # Метод для удаления сотрудника из списка
    def remove_employee(self, name):
        # Перебираем всех сотрудников в списке
        for emp in self.employees:
            # Если имя сотрудника совпадает с именем удаляемого сотрудника
            if emp.name == name:
                # Удаляем сотрудника из списка
                self.employees.remove(emp)
                # Выводим сообщение об удалении
                print(f'Сотрудник {name} удален из списка')
                # Сохраняем обновленный список сотрудников в файл
                self.save_to_file(self.file_name)
                return
        # Если сотрудник не найден, выводим сообщение
        print(f'Сотрудник {name} не найден в списке')


# Создаем объект компании
company = Company()

# Проверяем, пуст ли список сотрудников на начало программы
if not company.employees:
    # Если список пуст, выводим сообщение
    print('Список сотрудников в начале программы пустой')

# Бесконечный цикл для работы программы
while True:
    # Выводим приветственное сообщение и доступные команды
    print('Добро пожаловать в программу Сотрудника 2.0')
    print('--------------------------------------------')
    print('В этой программе доступны команды: \n'
          'add  - добавить сотрудника\n'
          'list - вывод списка всех сотрудников\n'
          'save - сохранить список сотрудников в файл\n'
          'load - загрузить список сотрудников из файла\n'
          'remove - удалить сотрудника\n'
          'exit - выйти из программы')

    # Запрашиваем у пользователя действие
    action = input('Выберете действие (add/list/save/load/remove/exit): ')

    # Обрабатываем действие "add" (добавление сотрудника)
    if action == 'add':
        # Запрашиваем тип сотрудника (разработчик или тимлид)
        emp_type = input('Введите тип сотрудника (разработчик/тимлид): ')
        # Запрашиваем имя сотрудника
        name = input('Введите имя сотрудника: ')
        # Запрашиваем должность сотрудника
        position = input('Введите должность сотрудника: ')
        # Запрашиваем зарплату сотрудника
        salary = input('Введите зарплату сотрудника: ')

        try:
            # Преобразуем зарплату в число (float)
            salary = float(salary)
        except ValueError:
            # Если ввод некорректен, выводим сообщение об ошибке и переходим к следующей итерации
            print('Ошибка: Зарплата должна быть числом. Попробуйте снова.')
            continue

        # Если тип сотрудника - тимлид
        if emp_type == 'тимлид':
            # Запрашиваем размер команды
            team_size = input('Введите размер команды: ')
            try:
                # Преобразуем размер команды в целое число (int)
                team_size = int(team_size)
            except ValueError:
                # Если ввод некорректен, выводим сообщение об ошибке и переходим к следующей итерации
                print('Ошибка: Размер команды должен быть целым числом. Попробуйте снова.')
                continue
            # Добавляем менеджера в список сотрудников
            company.add_employee(Manager(name, position, salary, team_size))
        else:
            # Если тип сотрудника - разработчик, добавляем обычного сотрудника
            company.add_employee(Employee(name, position, salary))

    # Обрабатываем действие "list" (вывод списка сотрудников)
    elif action == 'list':
        # Вызываем метод для вывода списка сотрудников
        company.list_employees()

    # Обрабатываем действие "save" (сохранение списка сотрудников в файл)
    elif action == 'save':
        # Запрашиваем имя файла для сохранения
        file_name = input('Введите имя файла: ')
        # Вызываем метод для сохранения списка сотрудников в файл
        company.save_to_file(file_name)
        # Выводим сообщение об успешном сохранении
        print(f'Список сотрудников успешно сохранен в файл {file_name}')

    # Обрабатываем действие "load" (загрузка списка сотрудников из файла)
    elif action == 'load':
        # Запрашиваем имя файла для загрузки
        file_name = input('Введите имя файла: ')
        # Вызываем метод для загрузки списка сотрудников из файла
        company.load_from_file(file_name)

    # Обрабатываем действие "remove" (удаление сотрудника)
    elif action == 'remove':
        # Запрашиваем имя сотрудника для удаления
        name = input('Введите имя сотрудника для удаления: ')
        # Вызываем метод для удаления сотрудника
        company.remove_employee(name)

    # Обрабатываем действие "exit" (выход из программы)
    elif action == 'exit':
        # Выводим сообщение о выходе
        print('Выход из программы.')
        # Прерываем цикл, завершая программу
        break

    # Обрабатываем некорректное действие
    else:
        # Выводим сообщение об ошибке
        print('Некорректное действие! Пожалуйста, попробуйте еще раз.')